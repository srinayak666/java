-final keyword is used in several contexts to define an entity that can only be assigned once.
-Once a final variable has been assigned, it always contains the same value. 
-If a final variable holds a reference to an object, then the state of the object may be changed by operations on the object, but the variable will always refer to the same object (this property of final is called non-transitivity).
-This applies also to arrays, because arrays are objects; 
-if a final variable holds a reference to an array, then the components of the array may be changed by operations on the array, but the variable will always refer to the same array.

#Final classes
A final class cannot be subclassed. As doing this can confer security and efficiency benefits, many of the Java standard library classes are final, such as java.lang.System and java.lang.String.

Example:

public final class MyFinalClass {...}

public class ThisIsWrong extends MyFinalClass {...} // forbidden

#Final methods
-A final method cannot be overridden or hidden by subclasses. 
-This is used to prevent unexpected behavior from a subclass altering a method that may be crucial to the function or consistency of the class.

Example:

public class Base
{
    public       void m1() {...}
    public final void m2() {...}

    public static       void m3() {...}
    public static final void m4() {...}
}

public class Derived extends Base
{
    public void m1() {...}  // OK, overriding Base#m1()
    public void m2() {...}  // forbidden

    public static void m3() {...}  // OK, hiding Base#m3()
    public static void m4() {...}  // forbidden
}
A common misconception is that declaring a method as final improves efficiency by allowing the compiler to directly insert the method wherever it is called.-
-Because the method is loaded at runtime, compilers are unable to do this. 
-Only the runtime environment and JIT compiler know exactly which classes have been loaded, and so only they are able to make decisions about when to inline [inline is which- replaces a function call site with the body of the called function], whether or not the method is final.
-Machine code compilers that generate directly executable, platform-specific machine code, are an exception. 
-When using static linking, the compiler can safely assume that methods and variables computable at compile-time may be inlined.


#Final variables
-A final variable can only be initialized once, either via an initializer or an assignment statement. 
-It does not need to be initialized at the point of declaration: this is called a "blank final" variable.
-A blank final instance variable of a class must be definitely assigned in every constructor of the class in which it is declared;
-similarly, a blank final static variable must be definitely assigned in a static initializer of the class in which it is declared; otherwise, a compile-time error occurs in both cases
- (Note: If the variable is a reference, this means that the variable cannot be re-bound to reference another object. But the object that it references is still mutable, if it was originally mutable.)

Unlike the value of a constant, the value of a final variable is not necessarily known at compile time. 
-It is considered good practice to represent final constants in all uppercase, using underscore to separate words.

Example:

public class Sphere {

    // pi is a universal constant, about as constant as anything can be.
    public static final double PI = 3.141592653589793;

    public final double radius;
    public final double xPos;
    public final double yPos;
    public final double zPos;

    Sphere(double x, double y, double z, double r) {
         radius = r;
         xPos = x;
         yPos = y;
         zPos = z;
    }

    [...]
}
-Any attempt to reassign radius, xPos, yPos, or zPos will result in a compile error. 
-In fact, even if the constructor doesn't set a final variable, attempting to set it outside the constructor will result in a compilation error.

To illustrate that finality doesn't guarantee immutability: suppose we replace the three position variables with a single one:

    public final Position pos;

where pos is an object with three properties pos.x, pos.y and pos.z. 
-Then pos cannot be assigned to, but the three properties can, unless they are final themselves.

-Like full immutability, the use of final variables has great advantages, especially in optimization. 
-For instance, Sphere will probably have a function returning its volume; knowing that its radius is constant allows us to memoize the computed volume. 
-If we have relatively few Spheres and we need their volumes very often, the performance gain might be substantial. 
-Making the radius of a Sphere final informs developers and compilers that this sort of optimization is possible in all code that uses Spheres.

Though it appears to violate the final principle, the following is a legal statement:

for (final SomeObject obj : someList) {
   // do something with obj
}
-Since the obj variable goes out of scope with each iteration of the loop, it is actually redeclared each iteration, allowing the same token (i.e. obj) to be used to represent multiple variables.


#Final variables in nested objects
-Final variables can be used to construct trees of immutable objects. 
-Once constructed, these objects are guaranteed not to change anymore. 
-To achieve this, an immutable class must only have final fields, and these final fields may only have immutable types themselves. 
-Java's primitive types are immutable, as are strings and several other classes.

-If the above construction is violated by having an object in the tree that is not immutable, the expectation does not hold that anything reachable via the final variable is constant.
- For example, the following code defines a coordinate system whose origin should always be at (0, 0). 
-The origin is implemented using a java.awt.Point though, and this class defines its fields as public and modifiable. 
-This means that even when reaching the origin object over an access path with only final variables, that object can still be modified, as the below example code demonstrates.

import java.awt.Point;

public class FinalDemo {

    static class CoordinateSystem {
        private final Point origin = new Point(0, 0);

        public Point getOrigin() { return origin; }
    }

    public static void main(String[] args) {
        CoordinateSystem coordinateSystem = new CoordinateSystem();

        coordinateSystem.getOrigin().x = 15;

        assert coordinateSystem.getOrigin().getX() == 0;
    }
}
-The reason for this is that declaring a variable final only means that this variable will point to the same object at any time. 
-The object that the variable points to is not influenced by that final variable though. 
-In the above example, the origin's x and y coordinates can be freely modified.

-To prevent this undesirable situation, a common requirement is that all fields of an immutable object must be final, and that the types of these fields must be immutable themselves. 
-This disqualifies java.util.Date and java.awt.Point and several other classes from being used in such immutable objects.

#Final and inner classes
-When an anonymous inner class is defined within the body of a method, all variables declared final in the scope of that method are accessible from within the inner class. 
-For scalar values, once it has been assigned, the value of the final variable cannot change. 
-For object values, the reference cannot change. This allows the Java compiler to "capture" the value of the variable at run-time and store a copy as a field in the inner class. Once the outer method has terminated and its stack frame has been removed, the original variable is gone but the inner class's private copy persists in the class's own memory.

import javax.swing.*;

public class FooGUI {

    public static void main(String[] args) {
        //initialize GUI components
        final JFrame jf = new JFrame("Hello world!"); //allows jf to be accessed from inner class body
        jf.add(new JButton("Click me"));

        // pack and make visible on the Event-Dispatch Thread
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jf.pack(); //this would be a compile-time error if jf were not final
                jf.setLocationRelativeTo(null);
                jf.setVisible(true);
            }
        });
    }
}

#Blank final
-The blank final, which was introduced in Java 1.1, is a final variable whose declaration lacks an initializer. 
-Previous to Java 1.1, a final variable was required to have an initializer. 
-A blank final, by definition of "final", can only be assigned once. i.e. it must be unassigned when an assignment occurs. In order to do this, a Java compiler runs a flow analysis to ensure that, for every assignment to a blank final variable, the variable is definitely unassigned before the assignment; otherwise a compile-time error occurs.

final boolean hasTwoDigits;

if (number >= 10 && number < 100) {
  hasTwoDigits = true;
}
if (number > -100 && number <= -10) {
  hasTwoDigits = true; // compile-error because the final variable might already be assigned.
}
-In addition, a blank final also has to be definitely assigned before being accessed. 

final boolean isEven;

if (number % 2 == 0) {
  isEven = true;
}

System.out.println(isEven); // compile-error because the variable was not assigned in the else-case.
Note though that a non-final local variable also needs to be definitely assigned before being accessed.

boolean isEven; // *not* final

if (number % 2 == 0) {
  isEven = true;
}

System.out.println(isEven); // Same compile-error because the non-final variable was not assigned in the else-case.

